[RULE: msft_azure_resourcelogs_commonfields]
alter
	get_resultSignature_resCode = if(resultSignature ~= "^\d{3}$", to_integer(resultSignature))
| alter
	xdm.target.resource.id = resourceId,
	xdm.source.cloud.project_id = tenantId,
	xdm.event.operation_sub_type = operationName,
	xdm.event.original_event_type = category,
	xdm.event.outcome = if(resultType ~= "Start", XDM_CONST.OUTCOME_UNKNOWN, resultType ~= "[Pp]rogress", XDM_CONST.OUTCOME_UNKNOWN, resultType ~= "Succe", XDM_CONST.OUTCOME_SUCCESS, resultType ~= "Fail", XDM_CONST.OUTCOME_FAILED, resultType ~= "Active", XDM_CONST.OUTCOME_UNKNOWN, resultType ~= "Resolv", XDM_CONST.OUTCOME_SUCCESS, resultType = null, null, to_string(resultType)),
	xdm.event.outcome_reason = if(resultType !~= "\d+", resultType, resultType ~= "\d+" and resultDescription != null, concat(resultDescription, " Error Code: ", resultType), concat("Error Code: ", resultType)),
	xdm.network.http.response_code = if(get_resultSignature_resCode = 100, XDM_CONST.HTTP_RSP_CODE_CONTINUE, get_resultSignature_resCode = 101, XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, get_resultSignature_resCode = 102, XDM_CONST.HTTP_RSP_CODE_PROCESSING, get_resultSignature_resCode = 103, XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, get_resultSignature_resCode = 200, XDM_CONST.HTTP_RSP_CODE_OK, get_resultSignature_resCode = 201, XDM_CONST.HTTP_RSP_CODE_CREATED, get_resultSignature_resCode = 202, XDM_CONST.HTTP_RSP_CODE_ACCEPTED, get_resultSignature_resCode = 203, XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, get_resultSignature_resCode = 204, XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, get_resultSignature_resCode = 205, XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, get_resultSignature_resCode = 206, XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, get_resultSignature_resCode = 207, XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, get_resultSignature_resCode = 208, XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, get_resultSignature_resCode = 226, XDM_CONST.HTTP_RSP_CODE_IM_USED, get_resultSignature_resCode = 300, XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, get_resultSignature_resCode = 301, XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, get_resultSignature_resCode = 302, XDM_CONST.HTTP_RSP_CODE_FOUND, get_resultSignature_resCode = 303, XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, get_resultSignature_resCode = 304, XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, get_resultSignature_resCode = 305, XDM_CONST.HTTP_RSP_CODE_USE_PROXY, get_resultSignature_resCode = 307, XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, get_resultSignature_resCode = 308, XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, get_resultSignature_resCode = 400, XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, get_resultSignature_resCode = 401, XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, get_resultSignature_resCode = 402, XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, get_resultSignature_resCode = 403, XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, get_resultSignature_resCode = 404, XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, get_resultSignature_resCode = 405, XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, get_resultSignature_resCode = 406, XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, get_resultSignature_resCode = 407, XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, get_resultSignature_resCode = 408, XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, get_resultSignature_resCode = 409, XDM_CONST.HTTP_RSP_CODE_CONFLICT, get_resultSignature_resCode = 410, XDM_CONST.HTTP_RSP_CODE_GONE, get_resultSignature_resCode = 411, XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, get_resultSignature_resCode = 412, XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, get_resultSignature_resCode = 413, XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, get_resultSignature_resCode = 414, XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, get_resultSignature_resCode = 415, XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, get_resultSignature_resCode = 416, XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, get_resultSignature_resCode = 417, XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, get_resultSignature_resCode = 421, XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, get_resultSignature_resCode = 422, XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, get_resultSignature_resCode = 423, XDM_CONST.HTTP_RSP_CODE_LOCKED, get_resultSignature_resCode = 424, XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, get_resultSignature_resCode = 425, XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, get_resultSignature_resCode = 426, XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, get_resultSignature_resCode = 428, XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, get_resultSignature_resCode = 429, XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, get_resultSignature_resCode = 431, XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, get_resultSignature_resCode = 451, XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, get_resultSignature_resCode = 500, XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, get_resultSignature_resCode = 501, XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, get_resultSignature_resCode = 502, XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, get_resultSignature_resCode = 503, XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, get_resultSignature_resCode = 504, XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, get_resultSignature_resCode = 505, XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, get_resultSignature_resCode = 506, XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, get_resultSignature_resCode = 507, XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, get_resultSignature_resCode = 508, XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, get_resultSignature_resCode = 511, XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, get_resultSignature_resCode = null, null, to_string(get_resultSignature_resCode)),
	xdm.event.duration = to_integer(durationMs),
    xdm.source.ipv4 = if(callerIpAddress ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", arrayindex(regextract(callerIpAddress, "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"), 0)),
    xdm.source.ipv6 = if(callerIpAddress ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", arrayindex(regextract(callerIpAddress, "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}"), 0)),
	xdm.session_context_id = correlationId,
	xdm.source.user.username = to_string(identity),
	xdm.event.log_level = if(level = "Informational", XDM_CONST.LOG_LEVEL_INFORMATIONAL, level = "Warning", XDM_CONST.LOG_LEVEL_WARNING, level = "Error", XDM_CONST.LOG_LEVEL_ERROR, level = "Critical", XDM_CONST.LOG_LEVEL_CRITICAL level = null, null, to_string(level)),
	xdm.source.cloud.region = location,
	xdm.source.cloud.provider = if(1=1, XDM_CONST.CLOUD_PROVIDER_AZURE);

[MODEL: dataset=msft_azure_waf_raw]
call msft_azure_resourcelogs_commonfields
| alter
    