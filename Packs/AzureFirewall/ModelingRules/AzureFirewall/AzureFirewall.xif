[MODEL: dataset=msft_azure_firewall_raw]
call map_msft_azure_resource_logs_common_fields;

// Azure Firewall Azure Firewall IDPS Signature (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwidpssignature)
filter category in ("AZFWFqdnResolveFailure", "AZFWInternalFqdnResolutionFailure") 
| alter 
	dns_server_ipv4 = arrayindex(regextract(properties -> ServerIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	dns_server_ipv6 = arrayindex(regextract(properties -> ServerIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	dns_server_port = to_integer(properties -> ServerPort), 
	error_msg = if(properties -> Error != "", properties -> Error),
	policy = if(properties -> Policy != "", properties -> Policy),
	rule = if(properties -> Rule != "", properties -> Rule)
| alter
	xdm.event.outcome = XDM_CONST.OUTCOME_FAILED,
	xdm.event.outcome_reason = error_msg,
	xdm.intermediate.host.ipv4_public_addresses = if(dns_server_ipv4 != null and not incidr(dns_server_ipv4, "10.0.0.0/8") and not incidr(dns_server_ipv4, "172.16.0.0/12") and not incidr(dns_server_ipv4, "192.168.0.0/16") and not incidr(dns_server_ipv4, "127.0.0.0/8") and not incidr(dns_server_ipv4, "169.254.0.0/16") and not incidr(dns_server_ipv4, "100.64.0.0/10"), arraycreate(dns_server_ipv4)),
	xdm.intermediate.ipv4 = dns_server_ipv4,
	xdm.intermediate.ipv6 = dns_server_ipv6,
	xdm.intermediate.port = dns_server_port,
	xdm.network.rule = coalesce(concat(policy, ":", rule), rule, policy),
	xdm.target.host.fqdn = properties -> Fqdn;


// Azure Firewall Azure Firewall IDPS Signature (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwidpssignature)
filter category = "AZFWIdpsSignature" 
| alter 
	action = if(properties -> Action != "", properties -> Action),
	ip_protocol = uppercase(properties -> Protocol),
	source_ip = properties -> SourceIp,
	destination_ip = properties -> DestinationIp,
	signature_category = if(properties -> Category != "", properties -> Category),
	signature_description = if(properties -> Description != "", properties -> Description),
	signature_id = if(properties -> SignatureId != "", properties -> SignatureId),
	signature_severity = if(properties -> Severity != "", to_string(properties -> Severity))
| alter 
	source_ipv4 = if(incidr(source_ip, "0.0.0.0/0"), source_ip),
	source_ipv6 = if(source_ip ~= "^(?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4}$", source_ip),
	destination_ipv4 = if(incidr(destination_ip, "0.0.0.0/0"), destination_ip),
	destination_ipv6 = if(destination_ip ~= "^(?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4}$", destination_ip)
| alter 
	xdm.alert.description = signature_description,
	xdm.alert.original_threat_id = signature_id,
	xdm.alert.original_threat_name = signature_description,
	xdm.alert.severity = signature_severity,
	xdm.alert.subcategory = signature_category,
	xdm.event.outcome = if(action = "Allow", XDM_CONST.OUTCOME_SUCCESS, action = "Deny" or action = "Drop", XDM_CONST.OUTCOME_FAILED),
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.observer.action = action,
	xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
	xdm.target.host.ipv4_public_addresses = if(destination_ipv4 != null and not incidr(destination_ipv4, "10.0.0.0/8") and not incidr(destination_ipv4, "172.16.0.0/12") and not incidr(destination_ipv4, "192.168.0.0/16") and not incidr(destination_ipv4, "127.0.0.0/8") and not incidr(destination_ipv4, "169.254.0.0/16") and not incidr(destination_ipv4, "100.64.0.0/10"), arraycreate(destination_ipv4)),
	xdm.target.ipv4 = destination_ipv4,
	xdm.target.ipv6 = destination_ipv6,
	xdm.target.port = to_integer(properties -> DestinationPort);



// Azure Firewall Threat Intelligence https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwthreatintel 
filter category = "AZFWThreatIntel" 
| alter 
	action = if(properties -> Action != "", properties -> Action),
	ip_protocol = uppercase(properties -> Protocol),
	source_ip = properties -> SourceIp,
	destination_ip = properties -> DestinationIp,
	target_fqdn = if(properties -> Fqdn != "", properties -> Fqdn),
	target_url = if(properties -> TargetUrl != "", properties -> TargetUrl),
	threat_description = if(properties -> ThreatDescription != "", properties -> ThreatDescription)
| alter 
	source_ipv4 = if(incidr(source_ip, "0.0.0.0/0"), source_ip),
	source_ipv6 = if(source_ip ~= "^(?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4}$", source_ip),
	destination_ipv4 = if(incidr(destination_ip, "0.0.0.0/0"), destination_ip),
	destination_ipv6 = if(destination_ip ~= "^(?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4}$", destination_ip)
| alter 
	xdm.alert.description = threat_description,
	xdm.network.http.url = target_url,
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.observer.action = action,
	xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
	xdm.target.host.fqdn = target_fqdn,
	xdm.target.host.ipv4_public_addresses = if(destination_ipv4 != null and not incidr(destination_ipv4, "10.0.0.0/8") and not incidr(destination_ipv4, "172.16.0.0/12") and not incidr(destination_ipv4, "192.168.0.0/16") and not incidr(destination_ipv4, "127.0.0.0/8") and not incidr(destination_ipv4, "169.254.0.0/16") and not incidr(destination_ipv4, "100.64.0.0/10"), arraycreate(destination_ipv4)),
	xdm.target.ipv4 = destination_ipv4,
	xdm.target.ipv6 = destination_ipv6,
	xdm.target.port = to_integer(properties -> DestinationPort),
	xdm.target.url = target_url;

// Azure Firewall Nat Rule (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwnatrule)
filter category in ("AZFWNatRule", "AZFWNatRuleAggregation")
| alter 
	destination_ipv4 = arrayindex(regextract(properties -> DestinationIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	destination_ipv6 = arrayindex(regextract(properties -> DestinationIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	ip_protocol = uppercase(properties -> Protocol),
	policy = if(properties -> Policy != "", properties -> Policy),
	source_ipv4 = arrayindex(regextract(properties -> SourceIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	source_ipv6 = arrayindex(regextract(properties -> SourceIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	translated_destination_ipv4 = arrayindex(regextract(properties -> TranslatedIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	translated_destination_ipv6 = arrayindex(regextract(properties -> TranslatedIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	rule = if(properties -> Rule != "", properties -> Rule)
| alter 
	xdm.intermediate.host.ipv4_public_addresses = if(destination_ipv4 != null and not incidr(destination_ipv4, "10.0.0.0/8") and not incidr(destination_ipv4, "172.16.0.0/12") and not incidr(destination_ipv4, "192.168.0.0/16") and not incidr(destination_ipv4, "127.0.0.0/8") and not incidr(destination_ipv4, "169.254.0.0/16") and not incidr(destination_ipv4, "100.64.0.0/10"), arraycreate(destination_ipv4)),
	xdm.intermediate.ipv4 = destination_ipv4,
	xdm.intermediate.ipv6 = destination_ipv6,
	xdm.intermediate.is_nat = to_boolean("TRUE"),
	xdm.intermediate.port = to_integer(properties -> DestinationPort);
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.network.rule = coalesce(concat(policy, ":", rule), rule, policy),
	xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
	xdm.target.host.ipv4_public_addresses = if(translated_destination_ipv4 != null and not incidr(translated_destination_ipv4, "10.0.0.0/8") and not incidr(translated_destination_ipv4, "172.16.0.0/12") and not incidr(translated_destination_ipv4, "192.168.0.0/16") and not incidr(translated_destination_ipv4, "127.0.0.0/8") and not incidr(translated_destination_ipv4, "169.254.0.0/16") and not incidr(translated_destination_ipv4, "100.64.0.0/10"), arraycreate(translated_destination_ipv4)),
	xdm.target.ipv4 = translated_destination_ipv4,
	xdm.target.ipv6 = translated_destination_ipv6,
	xdm.target.port = to_integer(properties -> TranslatedPort);

filter category = "AZFWDnsQuery" // Azure Firewall DNS query (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwdnsquery)
| alter 
	dns_query_type = properties -> QueryType,
	dns_query_class = properties -> QueryClass, 
	dns_response_code = properties -> ResponseCode,
	dns_response_flags = split(uppercase(properties -> ResponseFlags), ","),
	error_msg = properties -> ErrorMessage, // Description of the error returned to the client. Empty if request is successful. 
	ip_protocol = uppercase(properties -> Protocol),
	source_ipv4 = arrayindex(regextract(properties -> SourceIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	source_ipv6 = arrayindex(regextract(properties -> SourceIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0)
| alter 
	xdm.event.duration = to_integer(multiply(to_number(properties -> RequestDurationSecs), 1000)), // convert seconds to milliseconds
	xdm.event.id = to_string(properties -> QueryId),
	xdm.event.outcome = if(dns_response_code = "NOERROR", XDM_CONST.OUTCOME_SUCCESS, dns_response_code != "0" or (error_msg != null and error_msg != ""), XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_UNKNOWN),
	xdm.event.outcome_reason = if(error_msg != null and error_msg != "", error_msg, dns_response_code),
	xdm.network.dns.authoritative = array_any(dns_response_flags, "@element" = "AA"), // see https://datatracker.ietf.org/doc/html/rfc1035#section-4.1.1
	xdm.network.dns.dns_question.class = if(dns_query_class = "IN", 1, dns_query_class = "CS", 2, dns_query_class = "CH", 3, dns_query_class = "HS", 4), // see https://datatracker.ietf.org/doc/html/rfc1035#section-3.2.4
	xdm.network.dns.dns_question.name = properties -> QueryName,
	xdm.network.dns.dns_question.type = if(dns_query_type = "A", XDM_CONST.DNS_RECORD_TYPE_A, dns_query_type = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA, dns_query_type = "AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB, dns_query_type = "APL", XDM_CONST.DNS_RECORD_TYPE_APL, dns_query_type = "CAA", XDM_CONST.DNS_RECORD_TYPE_CAA, dns_query_type = "CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, dns_query_type = "CDS", XDM_CONST.DNS_RECORD_TYPE_CDS, dns_query_type = "CERT", XDM_CONST.DNS_RECORD_TYPE_CERT, dns_query_type = "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME, dns_query_type = "CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC, dns_query_type = "DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID, dns_query_type = "DLV", XDM_CONST.DNS_RECORD_TYPE_DLV, dns_query_type = "DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME, dns_query_type = "DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, dns_query_type = "DS", XDM_CONST.DNS_RECORD_TYPE_DS, dns_query_type = "EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48, dns_query_type = "EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64, dns_query_type = "HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO, dns_query_type = "HIP", XDM_CONST.DNS_RECORD_TYPE_HIP, dns_query_type = "HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS, dns_query_type = "IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, dns_query_type = "KEY", XDM_CONST.DNS_RECORD_TYPE_KEY, dns_query_type = "KX", XDM_CONST.DNS_RECORD_TYPE_KX, dns_query_type = "LOC", XDM_CONST.DNS_RECORD_TYPE_LOC, dns_query_type = "MX", XDM_CONST.DNS_RECORD_TYPE_MX, dns_query_type = "NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR, dns_query_type = "NS", XDM_CONST.DNS_RECORD_TYPE_NS, dns_query_type = "NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC, dns_query_type = "NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3, dns_query_type = "NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, dns_query_type = "OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, dns_query_type = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR, dns_query_type = "RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG, dns_query_type = "RP", XDM_CONST.DNS_RECORD_TYPE_RP, dns_query_type = "SIG", XDM_CONST.DNS_RECORD_TYPE_SIG, dns_query_type = "SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, dns_query_type = "SOA", XDM_CONST.DNS_RECORD_TYPE_SOA, dns_query_type = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV, dns_query_type = "SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP, dns_query_type = "SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB, dns_query_type = "TA", XDM_CONST.DNS_RECORD_TYPE_TA, dns_query_type = "TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY, dns_query_type = "TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA, dns_query_type = "TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG, dns_query_type = "TXT", XDM_CONST.DNS_RECORD_TYPE_TXT, dns_query_type = "URI", XDM_CONST.DNS_RECORD_TYPE_URI, dns_query_type = "ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, dns_query_type),
	xdm.network.dns.is_truncated = array_any(dns_response_flags, "@element" = "TC"), // see https://datatracker.ietf.org/doc/html/rfc1035#section-4.1.1
	xdm.network.dns.response_code = if(dns_response_code = "NOERROR", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, dns_response_code = "FORMERR", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, dns_response_code = "SERVFAIL", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE, dns_response_code = "NXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, dns_response_code = "NOTIMP", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED, dns_response_code = "REFUSED", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, dns_response_code = "YXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT, dns_response_code = "YXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT, dns_response_code = "NXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, dns_response_code = "NOTAUTH", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE, dns_response_code = "NOTZONE", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE, dns_response_code = "BADVERS", XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION, dns_response_code = "BADSIG", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE, dns_response_code = "BADKEY", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED, dns_response_code = "BADTIME", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW, dns_response_code = "BADMODE", XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE, dns_response_code = "BADNAME", XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME, dns_response_code = "BADALG", XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED, dns_response_code = "BADTRUNC", XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, dns_response_code),
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
    xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.source.port = to_integer(properties -> SourcePort),
	xdm.source.sent_bytes = to_integer(properties -> RequestSize),
	xdm.target.sent_bytes = to_integer(properties -> ResponseSize);

// Azure Firewall Network Rule (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwnetworkrule)
filter category in ("AZFWNetworkRule", "AZFWNetworkRuleAggregation") 
| alter
	destination_ipv4 = arrayindex(regextract(properties -> DestinationIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	destination_ipv6 = arrayindex(regextract(properties -> DestinationIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	ip_protocol = uppercase(properties -> Protocol),
	action = if(properties -> Action != "", properties -> Action),
	policy = if(properties -> Policy != "", properties -> Policy),
	rule = if(properties -> Rule != "", properties -> Rule),
	source_ipv4 = arrayindex(regextract(properties -> SourceIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	source_ipv6 = arrayindex(regextract(properties -> SourceIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0)
| alter 
	xdm.event.outcome = if(action = "Allow", XDM_CONST.OUTCOME_SUCCESS, action = "Deny" or action = "Drop", XDM_CONST.OUTCOME_FAILED),
	xdm.event.outcome_reason = if(properties -> ActionReason != "", properties -> ActionReason),
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.network.rule = coalesce(concat(policy, ":", rule), rule, policy),
	xdm.observer.action = action,
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
    xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.target.ipv4 = destination_ipv4,
	xdm.target.ipv6 = destination_ipv6,
    xdm.target.host.ipv4_public_addresses = if(destination_ipv4 != null and not incidr(destination_ipv4, "10.0.0.0/8") and not incidr(destination_ipv4, "172.16.0.0/12") and not incidr(destination_ipv4, "192.168.0.0/16") and not incidr(destination_ipv4, "127.0.0.0/8") and not incidr(destination_ipv4, "169.254.0.0/16") and not incidr(destination_ipv4, "100.64.0.0/10"), arraycreate(destination_ipv4)),
	xdm.target.port = to_integer(properties -> DestinationPort);


filter category in(
	"AZFWApplicationRule", // Azure Firewall Application Rule (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwapplicationrule)
	"AZFWApplicationRuleAggregation") //  & Azure Firewall Network Rule Aggregation (Policy Analytics) (https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwapplicationruleaggregation)
| alter 
	action = if(properties -> Action != "", properties -> Action),
	ip_protocol = uppercase(properties -> Protocol),
	is_explicit_proxy_request = to_boolean(properties -> IsExplicitProxyRequest),
	policy = if(properties -> Policy != "", properties -> Policy),
	rule = if(properties -> Rule != "", properties -> Rule),
	source_ip = properties -> SourceIp,
	target_fqdn = properties -> Fqdn,
	target_url = if(properties -> TargetUrl != "", properties -> TargetUrl)
| alter 
	source_ipv4 = if(incidr(source_ip, "0.0.0.0/0"), source_ip),
	source_ipv6 = if(source_ip ~= "^(?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4}$", source_ip),
	target_ipv4 = if(incidr(target_fqdn, "0.0.0.0/0"), target_fqdn),
	target_ipv6 = if(target_fqdn ~= "^(?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4}$", target_fqdn)
| alter 
	xdm.event.outcome = if(action = "Allow", XDM_CONST.OUTCOME_SUCCESS, action = "Deny" or action = "Drop", XDM_CONST.OUTCOME_FAILED),
	xdm.event.outcome_reason = if(properties -> ActionReason != "", properties -> ActionReason),
	xdm.intermediate.is_proxy = if(is_explicit_proxy_request, to_boolean("TRUE")),
	xdm.network.application_protocol = ip_protocol,
	xdm.network.http.url = target_url,
	xdm.network.http.url_category = if(properties -> WebCategory != "", properties -> WebCategory),
	xdm.network.rule = coalesce(concat(policy, ":", rule), rule, policy),
	xdm.observer.action = action,
	xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
	xdm.target.host.fqdn = if(target_ipv4 = null and target_ipv6 = null, target_fqdn), // assert the given FQDN is not an IPv4/6 address
	xdm.target.host.ipv4_public_addresses = if(target_ipv4 != null and not incidr(target_ipv4, "10.0.0.0/8") and not incidr(target_ipv4, "172.16.0.0/12") and not incidr(target_ipv4, "192.168.0.0/16") and not incidr(target_ipv4, "127.0.0.0/8") and not incidr(target_ipv4, "169.254.0.0/16") and not incidr(target_ipv4, "100.64.0.0/10"), arraycreate(target_ipv4)),
	xdm.target.ipv4 = target_ipv4,
	xdm.target.ipv6 = target_ipv6,
	xdm.target.port = to_integer(properties -> DestinationPort),
	xdm.target.url = target_url;

// https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwfatflow
filter category = "AZFWFatFlow" // Azure Firewall Fat Flow Log
| alter 
	destination_ipv4 = arrayindex(regextract(properties -> DestinationIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	destination_ipv6 = arrayindex(regextract(properties -> DestinationIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	ip_protocol = uppercase(properties -> Protocol),
	source_ipv4 = arrayindex(regextract(properties -> SourceIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	source_ipv6 = arrayindex(regextract(properties -> SourceIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0)
| alter 
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
    xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.target.ipv4 = destination_ipv4,
	xdm.target.ipv6 = destination_ipv6,
    xdm.target.host.ipv4_public_addresses = if(destination_ipv4 != null and not incidr(destination_ipv4, "10.0.0.0/8") and not incidr(destination_ipv4, "172.16.0.0/12") and not incidr(destination_ipv4, "192.168.0.0/16") and not incidr(destination_ipv4, "127.0.0.0/8") and not incidr(destination_ipv4, "169.254.0.0/16") and not incidr(destination_ipv4, "100.64.0.0/10"), arraycreate(destination_ipv4)),
	xdm.target.port = to_integer(properties -> DestinationPort);


// https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azfwflowtrace 
filter category = "AZFWFlowTrace" // Azure Firewall Flow Trace Log
| alter 
	action = if(properties -> Action != "", properties -> Action),
	destination_ipv4 = arrayindex(regextract(properties -> DestinationIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	destination_ipv6 = arrayindex(regextract(properties -> DestinationIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
	ip_protocol = uppercase(properties -> Protocol),
	flag = properties -> Flag,
	source_ipv4 = arrayindex(regextract(properties -> SourceIp, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	source_ipv6 = arrayindex(regextract(properties -> SourceIp, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0)
| alter 
	xdm.event.outcome = if(flag ~= "\-ACK", XDM_CONST.OUTCOME_SUCCESS, flag = "INVALID", XDM_CONST.OUTCOME_FAILED),
	xdm.event.outcome_reason = if(properties -> ActionReason != "", properties -> ActionReason),
	xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.port = to_integer(properties -> SourcePort),
    xdm.source.host.ipv4_public_addresses = if(source_ipv4 != null and not incidr(source_ipv4, "10.0.0.0/8") and not incidr(source_ipv4, "172.16.0.0/12") and not incidr(source_ipv4, "192.168.0.0/16") and not incidr(source_ipv4, "127.0.0.0/8") and not incidr(source_ipv4, "169.254.0.0/16") and not incidr(source_ipv4, "100.64.0.0/10"), arraycreate(source_ipv4)),
	xdm.target.ipv4 = destination_ipv4,
	xdm.target.ipv6 = destination_ipv6,
    xdm.target.host.ipv4_public_addresses = if(destination_ipv4 != null and not incidr(destination_ipv4, "10.0.0.0/8") and not incidr(destination_ipv4, "172.16.0.0/12") and not incidr(destination_ipv4, "192.168.0.0/16") and not incidr(destination_ipv4, "127.0.0.0/8") and not incidr(destination_ipv4, "169.254.0.0/16") and not incidr(destination_ipv4, "100.64.0.0/10"), arraycreate(destination_ipv4)),
	xdm.target.port = to_integer(properties -> DestinationPort);


[RULE: map_msft_azure_resource_logs_common_fields] 
/*  This rule normalizes the top-level schema that is common to all resource logs that are sent to an event hub.  
	Schema: https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema#top-level-common-schema */
alter // Extractions 
	http_status = if(resultSignature ~= "^\d{3}$", to_integer(resultSignature)),
	caller_ipv4 = arrayindex(regextract(callerIpAddress, "((?:\d{1,3}\.){3}\d{1,3})", 0)),
	caller_ipv6 = arrayindex(regextract(callerIpAddress, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})", 0))
| alter // XDM Mappings
	xdm.event.duration = to_integer(durationMs),
	xdm.event.log_level = if( // The severity level of the event. Must be one of Informational, Warning, Error, or Critical.
		level = "Informational", XDM_CONST.LOG_LEVEL_INFORMATIONAL, 
		level = "Warning", XDM_CONST.LOG_LEVEL_WARNING, 
		level = "Error", XDM_CONST.LOG_LEVEL_ERROR, 
		level = "Critical", XDM_CONST.LOG_LEVEL_CRITICAL, 
		level), // default fallback 
	xdm.event.operation_sub_type = operationName, // The name of the operation that this event is logging, for example Microsoft.Storage/storageAccounts/blobServices/blobs/Read. The operationName is typically modeled in the form of an Azure Resource Manager operation, Microsoft.<providerName>/<resourceType>/<subtype>/<Write|Read|Delete|Action>, even if it's not a documented Resource Manager operation.
	xdm.event.original_event_type = category, // The log category of the event being logged. 
	xdm.event.outcome = if(
		resultType in ("Started", "In Progress", "Active"), XDM_CONST.OUTCOME_UNKNOWN, 
		resultType in ("Succeeded", "Success", "Resolved"), XDM_CONST.OUTCOME_SUCCESS, 
		resultType = "Failed", XDM_CONST.OUTCOME_FAILED),
	xdm.event.outcome_reason = resultDescription,
	xdm.network.http.response_code = if(http_status = null, null, http_status = 200, XDM_CONST.HTTP_RSP_CODE_OK, http_status = 201, XDM_CONST.HTTP_RSP_CODE_CREATED, http_status = 302, XDM_CONST.HTTP_RSP_CODE_FOUND, http_status = 401, XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_status = 403, XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_status = 404, XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_status = 500, XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_status = 501, XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_status = 502, XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_status = 503, XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_status = 504, XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_status = 505, XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_status = 506, XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_status = 507, XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_status = 508, XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_status = 511, XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_status = 100, XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_status = 101, XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_status = 102, XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_status = 103, XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_status = 202, XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_status = 203, XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_status = 204, XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_status = 205, XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_status = 206, XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_status = 207, XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_status = 208, XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_status = 226, XDM_CONST.HTTP_RSP_CODE_IM_USED, http_status = 300, XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_status = 301, XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_status = 303, XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_status = 304, XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_status = 305, XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_status = 307, XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_status = 308, XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_status = 400, XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_status = 402, XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_status = 405, XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_status = 406, XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_status = 407, XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_status = 408, XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_status = 409, XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_status = 410, XDM_CONST.HTTP_RSP_CODE_GONE, http_status = 411, XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_status = 412, XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_status = 413, XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_status = 414, XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_status = 415, XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_status = 416, XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_status = 417, XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_status = 421, XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_status = 422, XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_status = 423, XDM_CONST.HTTP_RSP_CODE_LOCKED, http_status = 424, XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_status = 425, XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_status = 426, XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_status = 428, XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_status = 429, XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_status = 431, XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_status = 451, XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_status),
	xdm.session_context_id = correlationId, // A GUID that's used to group together a set of related events. 
	xdm.source.cloud.project_id = tenantId, // The tenant ID of the Active Directory tenant that this event is tied to. This property is used only for tenant-level logs. It does not appear in resource-level logs.
	xdm.source.cloud.provider = XDM_CONST.CLOUD_PROVIDER_AZURE,
	xdm.source.cloud.region = location, // The region of the resource emitting the event; for example, East US or France South.
	xdm.source.ipv4 = caller_ipv4,
	xdm.source.ipv6 = caller_ipv6,
	xdm.source.user.username = to_string(identity), // A JSON blob that describes the identity of the user or application that performed the operation. Typically, this field includes the authorization and claims or JWT token from Active Directory.
	xdm.target.resource.id = resourceId; // The resource ID of the resource that emitted the event. For tenant services, this is of the form /tenants/tenant-id/providers/provider-name.